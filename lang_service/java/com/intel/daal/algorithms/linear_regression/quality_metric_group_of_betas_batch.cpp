/* file: quality_metric_group_of_betas_batch.cpp */
/*******************************************************************************
* Copyright 2014-2019 Intel Corporation.
*
* This software and the related documents are Intel copyrighted  materials,  and
* your use of  them is  governed by the  express license  under which  they were
* provided to you (License).  Unless the License provides otherwise, you may not
* use, modify, copy, publish, distribute,  disclose or transmit this software or
* the related documents without Intel's prior written permission.
*
* This software and the related documents  are provided as  is,  with no express
* or implied  warranties,  other  than those  that are  expressly stated  in the
* License.
*******************************************************************************/

/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
#include "daal.h"
#include "linear_regression/quality_metric/JGroupOfBetasBatch.h"
#include "JComputeMode.h"
#include "common_helpers.h"

USING_COMMON_NAMESPACES();
using namespace daal::algorithms::linear_regression::quality_metric;
using namespace daal::algorithms::linear_regression::quality_metric::group_of_betas;

/*
* Class:     com_intel_daal_algorithms_linear_regression_quality_metric_GroupOfBetasBatch
* Method:    cInit
* Signature: (IIJJ)J
*/
JNIEXPORT jlong JNICALL Java_com_intel_daal_algorithms_linear_1regression_quality_1metric_GroupOfBetasBatch_cInit
(JNIEnv *, jobject, jint prec, jint method, jlong nBeta, jlong nBetaReducedModel)
{
    return jniBatch<group_of_betas::Method, Batch, defaultDense>::newObj(prec, method, nBeta, nBetaReducedModel);
}

/*
* Class:     com_intel_daal_algorithms_linear_regression_quality_metric_GroupOfBetasBatch
* Method:    cSetResult
* Signature: (JIIJ)V
*/
JNIEXPORT void JNICALL Java_com_intel_daal_algorithms_linear_1regression_quality_1metric_GroupOfBetasBatch_cSetResult
(JNIEnv *, jobject, jlong algAddr, jint prec, jint method, jlong resultAddr)
{
    jniBatch<group_of_betas::Method, Batch, defaultDense>::
        setResult<group_of_betas::Result>(prec, method, algAddr, resultAddr);
}


/*
* Class:     com_intel_daal_algorithms_linear_regression_quality_metric_GroupOfBetasBatch
* Method:    cInitParameter
* Signature: (JIIJJ)J
*/
JNIEXPORT jlong JNICALL Java_com_intel_daal_algorithms_linear_1regression_quality_1metric_GroupOfBetasBatch_cInitParameter
(JNIEnv *, jobject, jlong algAddr, jint prec, jint method, jlong nBeta, jlong nBetaReducedModel)
{
    group_of_betas::Parameter *parameterAddr = (group_of_betas::Parameter *)jniBatch<group_of_betas::Method, Batch, defaultDense>::getParameter(prec, method, algAddr);
    if(parameterAddr)
    {
        parameterAddr->numBeta = nBeta;
        parameterAddr->numBetaReducedModel = nBetaReducedModel;
    }

    return (jlong)parameterAddr;
}

/*
* Class:     com_intel_daal_algorithms_linear_regression_quality_metric_GroupOfBetasBatch
* Method:    cGetInput
* Signature: (JII)J
*/
JNIEXPORT jlong JNICALL Java_com_intel_daal_algorithms_linear_1regression_quality_1metric_GroupOfBetasBatch_cGetInput
(JNIEnv *, jobject, jlong algAddr, jint prec, jint method)
{
    return jniBatch<group_of_betas::Method, Batch, defaultDense>::getInput(prec, method, algAddr);
}

/*
* Class:     com_intel_daal_algorithms_linear_regression_quality_metric_GroupOfBetasBatch
* Method:    cGetResult
* Signature: (JII)J
*/
JNIEXPORT jlong JNICALL Java_com_intel_daal_algorithms_linear_1regression_quality_1metric_GroupOfBetasBatch_cGetResult
(JNIEnv *, jobject, jlong algAddr, jint prec, jint method)
{
    return jniBatch<group_of_betas::Method, Batch, defaultDense>::getResult(prec, method, algAddr);
}

/*
* Class:     com_intel_daal_algorithms_linear_regression_quality_metric_GroupOfBetasBatch
* Method:    cClone
* Signature: (JII)J
*/
JNIEXPORT jlong JNICALL Java_com_intel_daal_algorithms_linear_1regression_quality_1metric_GroupOfBetasBatch_cClone
(JNIEnv *, jobject, jlong algAddr, jint prec, jint method)
{
    return jniBatch<group_of_betas::Method, Batch, defaultDense>::getClone(prec, method, algAddr);
}
