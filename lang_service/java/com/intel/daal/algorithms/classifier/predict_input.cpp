/* file: predict_input.cpp */
/*******************************************************************************
* Copyright 2014-2019 Intel Corporation.
*
* This software and the related documents are Intel copyrighted  materials,  and
* your use of  them is  governed by the  express license  under which  they were
* provided to you (License).  Unless the License provides otherwise, you may not
* use, modify, copy, publish, distribute,  disclose or transmit this software or
* the related documents without Intel's prior written permission.
*
* This software and the related documents  are provided as  is,  with no express
* or implied  warranties,  other  than those  that are  expressly stated  in the
* License.
*******************************************************************************/

/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>/* Header for class com_intel_daal_algorithms_classifier_prediction_PredictionInput */

#include "daal.h"
#include "classifier/prediction/JPredictionInput.h"

#include "common_helpers.h"

USING_COMMON_NAMESPACES();
using namespace daal::algorithms::classifier;
using namespace daal::algorithms::classifier::prediction;

//#include "predict_types.i"

/*
 * Class:     com_intel_daal_algorithms_classifier_prediction_PredictionInput
 * Method:    cInit
 * Signature: (JIJ)I
 */
JNIEXPORT jlong JNICALL Java_com_intel_daal_algorithms_classifier_prediction_PredictionInput_cInit
(JNIEnv *env, jobject thisObj, jlong algAddr )
{
    classifier::prediction::Input *inputPtr = NULL;

    SharedPtr<Batch> alg =
        staticPointerCast<Batch, AlgorithmIface>
            (*(SharedPtr<AlgorithmIface> *)algAddr);
    inputPtr = alg->getInput();

    return (jlong)inputPtr;
}

/*
 * Class:     com_intel_daal_algorithms_classifier_prediction_PredictionInput
 * Method:    cSetInputTable
 * Signature:(JIJ)I
 */
JNIEXPORT void JNICALL Java_com_intel_daal_algorithms_classifier_prediction_PredictionInput_cSetInputTable
(JNIEnv *env, jobject thisObj, jlong inputAddr, jint id, jlong ntAddr)
{
    if(id != classifier::prediction::data) return;

    jniInput<classifier::prediction::Input>::set<classifier::prediction::NumericTableInputId, NumericTable>(inputAddr, id, ntAddr);
}

/*
 * Class:     com_intel_daal_algorithms_classifier_prediction_PredictionInput
 * Method:    cSetInputModel
 * Signature:(JIJ)I
 */
JNIEXPORT void JNICALL Java_com_intel_daal_algorithms_classifier_prediction_PredictionInput_cSetInputModel
(JNIEnv *env, jobject thisObj, jlong inputAddr, jint id, jlong ntAddr)
{
    if(id != classifier::prediction::model) return;

    jniInput<classifier::prediction::Input>::set<classifier::prediction::ModelInputId, classifier::Model>(inputAddr, id, ntAddr);
}

/*
 * Class:     com_intel_daal_algorithms_classifier_prediction_PredictionInput
 * Method:    cGetInputTable
 * Signature: (JI)J
 */
JNIEXPORT jlong JNICALL Java_com_intel_daal_algorithms_classifier_prediction_PredictionInput_cGetInputTable
(JNIEnv *env, jobject thisObj, jlong inputAddr, jint id)
{
    if(id != classifier::prediction::data) return (jlong)-1;

    return jniInput<classifier::prediction::Input>::get<classifier::prediction::NumericTableInputId, NumericTable>(inputAddr, id);
}

/*
 * Class:     com_intel_daal_algorithms_classifier_prediction_PredictionInput
 * Method:    cGetInputTable
 * Signature: (JI)J
 */
JNIEXPORT jlong JNICALL Java_com_intel_daal_algorithms_classifier_prediction_PredictionInput_cGetInputModel
(JNIEnv *env, jobject thisObj, jlong inputAddr, jint id)
{
    if(id != classifier::prediction::model) return (jlong)-1;

    return jniInput<classifier::prediction::Input>::get<classifier::prediction::ModelInputId, classifier::Model>(inputAddr, id);
}
