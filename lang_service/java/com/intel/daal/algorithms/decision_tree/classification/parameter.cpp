/* file: parameter.cpp */
/*******************************************************************************
* Copyright 2014-2019 Intel Corporation.
*
* This software and the related documents are Intel copyrighted  materials,  and
* your use of  them is  governed by the  express license  under which  they were
* provided to you (License).  Unless the License provides otherwise, you may not
* use, modify, copy, publish, distribute,  disclose or transmit this software or
* the related documents without Intel's prior written permission.
*
* This software and the related documents  are provided as  is,  with no express
* or implied  warranties,  other  than those  that are  expressly stated  in the
* License.
*******************************************************************************/

/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>

#include "daal.h"
#include "decision_tree/classification/JParameter.h"
#include "common_helpers.h"

USING_COMMON_NAMESPACES()

namespace dt = decision_tree;
namespace dtc = decision_tree::classification;

/*
* Class:     com_intel_daal_algorithms_decision_tree_classification_Parameter
* Method:    cGetPruning
* Signature: (J)I
*/
JNIEXPORT jint JNICALL Java_com_intel_daal_algorithms_decision_1tree_classification_Parameter_cGetPruning
(JNIEnv *env, jobject thisObj, jlong parAddr)
{
    return(jlong)(*(dtc::Parameter *)parAddr).pruning;
}

/*
* Class:     com_intel_daal_algorithms_decision_tree_classification_Parameter
* Method:    cSetPruning
* Signature: (JI)V
*/
JNIEXPORT void JNICALL Java_com_intel_daal_algorithms_decision_1tree_classification_Parameter_cSetPruning
(JNIEnv *env, jobject thisObj, jlong parAddr, jint value)
{
    (*(dtc::Parameter *)parAddr).pruning = (dt::Pruning)value;
}

/*
* Class:     com_intel_daal_algorithms_decision_tree_classification_Parameter
* Method:    cGetMaxTreeDepth
* Signature: (J)J
*/
JNIEXPORT jlong JNICALL Java_com_intel_daal_algorithms_decision_1tree_classification_Parameter_cGetMaxTreeDepth
(JNIEnv *env, jobject thisObj, jlong parAddr)
{
    return(jlong)(*(dtc::Parameter *)parAddr).maxTreeDepth;
}

/*
* Class:     com_intel_daal_algorithms_decision_tree_classification_Parameter
* Method:    cSetMaxTreeDepth
* Signature: (JJ)V
*/
JNIEXPORT void JNICALL Java_com_intel_daal_algorithms_decision_1tree_classification_Parameter_cSetMaxTreeDepth
(JNIEnv *env, jobject thisObj, jlong parAddr, jlong value)
{
    (*(dtc::Parameter *)parAddr).maxTreeDepth = (size_t)value;
}

/*
* Class:     com_intel_daal_algorithms_decision_tree_classification_Parameter
* Method:    cGetMinObservationsInLeafNodes
* Signature: (J)J
*/
JNIEXPORT jlong JNICALL Java_com_intel_daal_algorithms_decision_1tree_classification_Parameter_cGetMinObservationsInLeafNodes
(JNIEnv *env, jobject thisObj, jlong parAddr)
{
    return(jlong)(*(dtc::Parameter *)parAddr).minObservationsInLeafNodes;
}

/*
* Class:     com_intel_daal_algorithms_decision_tree_classification_Parameter
* Method:    cSetMinObservationsInLeafNodes
* Signature: (JJ)V
*/
JNIEXPORT void JNICALL Java_com_intel_daal_algorithms_decision_1tree_classification_Parameter_cSetMinObservationsInLeafNodes
(JNIEnv *env, jobject thisObj, jlong parAddr, jlong value)
{
    (*(dtc::Parameter *)parAddr).minObservationsInLeafNodes = (size_t)value;
}

/*
* Class:     com_intel_daal_algorithms_decision_tree_classification_Parameter
* Method:    cGetSplitCriterion
* Signature: (J)I
*/
JNIEXPORT jint JNICALL Java_com_intel_daal_algorithms_decision_1tree_classification_Parameter_cGetSplitCriterion
(JNIEnv *env, jobject thisObj, jlong parAddr)
{
    return(jlong)(*(dtc::Parameter *)parAddr).splitCriterion;
}

/*
* Class:     com_intel_daal_algorithms_decision_tree_classification_Parameter
* Method:    cSetSplitCriterion
* Signature: (JI)V
*/
JNIEXPORT void JNICALL Java_com_intel_daal_algorithms_decision_1tree_classification_Parameter_cSetSplitCriterion
(JNIEnv *env, jobject thisObj, jlong parAddr, jint value)
{
    (*(dtc::Parameter *)parAddr).splitCriterion = (dtc::SplitCriterion)value;
}
