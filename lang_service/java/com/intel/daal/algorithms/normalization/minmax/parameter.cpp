/* file: parameter.cpp */
/*******************************************************************************
* Copyright 2014-2019 Intel Corporation.
*
* This software and the related documents are Intel copyrighted  materials,  and
* your use of  them is  governed by the  express license  under which  they were
* provided to you (License).  Unless the License provides otherwise, you may not
* use, modify, copy, publish, distribute,  disclose or transmit this software or
* the related documents without Intel's prior written permission.
*
* This software and the related documents  are provided as  is,  with no express
* or implied  warranties,  other  than those  that are  expressly stated  in the
* License.
*******************************************************************************/

/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>

#include "daal.h"
#include "normalization/minmax/JParameter.h"
#include "normalization/minmax/JMethod.h"

#include "common_defines.i"

using namespace daal;
using namespace daal::algorithms;
using namespace daal::services;

using normalization::minmax::ParameterBase;

/*
 * Class:     com_intel_daal_algorithms_normalization_minmax_Parameter
 * Method:    cSetMoments
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_com_intel_daal_algorithms_normalization_minmax_Parameter_cSetMoments
(JNIEnv *env, jobject thisObj, jlong parAddr, jlong momentsAdr)
{
    auto parameter = reinterpret_cast<ParameterBase *>(parAddr);
    auto momentsAlg = reinterpret_cast<SharedPtr<AlgorithmIface> *>(momentsAdr);
    auto momentsBatchImpl = staticPointerCast<daal::algorithms::low_order_moments::BatchImpl>(*momentsAlg);

    parameter->moments = momentsBatchImpl;
}

/*
 * Class:     com_intel_daal_algorithms_normalization_minmax_Parameter
 * Method:    cGetLowerBound
 * Signature: (J)D
 */
JNIEXPORT jdouble JNICALL Java_com_intel_daal_algorithms_normalization_minmax_Parameter_cGetLowerBound
(JNIEnv *env, jobject thisObj, jlong parAddr)
{
    return (jdouble)(reinterpret_cast<ParameterBase *>(parAddr)->lowerBound);
}

/*
 * Class:     com_intel_daal_algorithms_normalization_minmax_Parameter
 * Method:    cSetLowerBound
 * Signature:(JD)I
 */
JNIEXPORT void JNICALL Java_com_intel_daal_algorithms_normalization_minmax_Parameter_cSetLowerBound
(JNIEnv *env, jobject thisObj, jlong parAddr, jdouble lowerBound)
{
    reinterpret_cast<ParameterBase *>(parAddr)->lowerBound = lowerBound;
}

/*
 * Class:     com_intel_daal_algorithms_normalization_minmax_Parameter
 * Method:    cGetUpperBound
 * Signature: (J)D
 */
JNIEXPORT jdouble JNICALL Java_com_intel_daal_algorithms_normalization_minmax_Parameter_cGetUpperBound
(JNIEnv *env, jobject thisObj, jlong parAddr)
{
    return (jdouble)(reinterpret_cast<ParameterBase *>(parAddr)->upperBound);
}

/*
 * Class:     com_intel_daal_algorithms_normalization_minmax_Parameter
 * Method:    cSetUpperBound
 * Signature:(JD)I
 */
JNIEXPORT void JNICALL Java_com_intel_daal_algorithms_normalization_minmax_Parameter_cSetUpperBound
(JNIEnv *env, jobject thisObj, jlong parAddr, jdouble upperBound)
{
    reinterpret_cast<ParameterBase *>(parAddr)->upperBound = upperBound;
}
