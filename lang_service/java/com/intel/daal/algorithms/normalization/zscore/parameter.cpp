/* file: parameter.cpp */
/*******************************************************************************
* Copyright 2014-2019 Intel Corporation.
*
* This software and the related documents are Intel copyrighted  materials,  and
* your use of  them is  governed by the  express license  under which  they were
* provided to you (License).  Unless the License provides otherwise, you may not
* use, modify, copy, publish, distribute,  disclose or transmit this software or
* the related documents without Intel's prior written permission.
*
* This software and the related documents  are provided as  is,  with no express
* or implied  warranties,  other  than those  that are  expressly stated  in the
* License.
*******************************************************************************/

/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>

#include "daal.h"
#include "normalization/zscore/JParameter.h"
#include "normalization/zscore/JMethod.h"

#include "common_defines.i"

#define DefaultDense com_intel_daal_algorithms_normalization_zscore_Method_DefaultDense
#define SumDense     com_intel_daal_algorithms_normalization_zscore_Method_SumDense
#define batchValue   com_intel_daal_algorithms_ComputeMode_batchValue

using namespace daal;
using namespace daal::algorithms;
using namespace daal::services;

/*
 * Class:     com_intel_daal_algorithms_normalization_zscore_Parameter
 * Method:    cSetMoments
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_com_intel_daal_algorithms_normalization_zscore_Parameter_cSetMoments
(JNIEnv *env, jobject thisObj, jlong parAddr, jlong momentsAdr, jint prec, jint method, jint cmode)
{
    using namespace daal::algorithms::normalization::zscore;
    if(method == defaultDense)
    {
        if(cmode == batchValue)
        {
            if(prec == 0) //double
            {
                normalization::zscore::Parameter<double, defaultDense> *parameterAddr = (normalization::zscore::Parameter<double,
                                                                                         defaultDense> *)parAddr;
                // parameterAddr->moments = *((SharedPtr<daal::algorithms::low_order_moments::BatchImpl> *)momentsAdr);
                parameterAddr->moments = staticPointerCast<daal::algorithms::low_order_moments::BatchImpl>(*(SharedPtr<AlgorithmIface> *)momentsAdr);
            }
            else
            {
                normalization::zscore::Parameter<float, defaultDense> *parameterAddr = (normalization::zscore::Parameter<float,
                                                                                        defaultDense> *)parAddr;
                // parameterAddr->moments = *((SharedPtr<daal::algorithms::low_order_moments::BatchImpl> *)momentsAdr);
                parameterAddr->moments = staticPointerCast<daal::algorithms::low_order_moments::BatchImpl>(*(SharedPtr<AlgorithmIface> *)momentsAdr);
            }
        }
    }
}

/*
 * Class:     com_intel_daal_algorithms_normalization_zscore_Parameter
 * Method:    cSetResultsToCompute
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_com_intel_daal_algorithms_normalization_zscore_Parameter_cSetResultsToCompute
(JNIEnv *, jobject, jlong parAddr, jlong resultsToCompute)
{
    ((normalization::zscore::interface2::BaseParameter *)parAddr)->resultsToCompute = resultsToCompute;
}

/*
 * Class:     com_intel_daal_algorithms_normalization_zscore_Parameter
 * Method:    cGetResultsToCompute
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_com_intel_daal_algorithms_normalization_zscore_Parameter_cGetResultsToCompute
(JNIEnv *, jobject, jlong parAddr)
{
    return ((normalization::zscore::interface2::BaseParameter *)parAddr)->resultsToCompute;
}
